AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for API Gateway and Lambda integration tests'

Resources:

  ParseAndReturnBodyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ParseAndReturnBodyFunction'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return JSON.parse(event.body);
          };
      Runtime: nodejs20.x

  ReturnDecodedParseBinLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ReturnDecodedParseBinFunction'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const decodedBody = atob(event.body);
            const parsedBody = JSON.parse(decodedBody.toString('utf8'));
            return parsedBody;
          };
      Runtime: nodejs20.x

  ReturnRawBodyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ReturnRawBodyFunction'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
            console.log(event);
            callback(null, event.body);
          };
      Runtime: nodejs20.x

  ReturnFullEventLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ReturnFullEventFunction'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(event)
            };
          };
      Runtime: nodejs20.x

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # Base REST API Gateway
  BaseRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${AWS::StackName}-BaseRestAPI'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - '*/*'

  # Add default method for REST API
  BaseRestApiRootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref BaseRestApi
      ResourceId: !GetAtt BaseRestApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE

  BaseRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref BaseRestApi
      StageName: 'test'

  # Base HTTP API v1
  BaseHttpApiV1:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub '${AWS::StackName}-BaseHttpAPIv1'
      ProtocolType: HTTP

  # Add default integration for HTTP API v1
  BaseHttpApiV1Integration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref BaseHttpApiV1
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt ParseAndReturnBodyLambdaFunction.Arn
      PayloadFormatVersion: '1.0'

  # Add default route for HTTP API v1
  BaseHttpApiV1Route:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref BaseHttpApiV1
      RouteKey: 'OPTIONS /'
      Target: !Sub 'integrations/${BaseHttpApiV1Integration}'

  BaseHttpApiV1Stage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref BaseHttpApiV1
      StageName: '$default'
      AutoDeploy: true

  # Base HTTP API v2
  BaseHttpApiV2:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub '${AWS::StackName}-BaseHttpAPIv2'
      ProtocolType: HTTP

  # Add default integration for HTTP API v2
  BaseHttpApiV2Integration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref BaseHttpApiV2
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt ParseAndReturnBodyLambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  # Add default route for HTTP API v2
  BaseHttpApiV2Route:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref BaseHttpApiV2
      RouteKey: 'OPTIONS /'
      Target: !Sub 'integrations/${BaseHttpApiV2Integration}'

  BaseHttpApiV2Stage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref BaseHttpApiV2
      StageName: '$default'
      AutoDeploy: true

  # Lambda permissions for base APIs
  LambdaPermissionBaseRestApi:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ParseAndReturnBodyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BaseRestApi}/*'

  LambdaPermissionBaseHttpApiV1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ParseAndReturnBodyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BaseHttpApiV1}/*'

  LambdaPermissionBaseHttpApiV2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ParseAndReturnBodyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BaseHttpApiV2}/*'

Outputs:
  BaseRestApiId:
    Description: 'ID of the Base REST API'
    Value: !Ref BaseRestApi

  BaseRestApiUrl:
    Description: 'Base URL of the REST API'
    Value: !Sub 'https://${BaseRestApi}.execute-api.${AWS::Region}.amazonaws.com/test'

  BaseHttpApiV1Id:
    Description: 'ID of the Base HTTP API v1'
    Value: !Ref BaseHttpApiV1

  BaseHttpApiV1Url:
    Description: 'Base URL of the HTTP API v1'
    Value: !Sub 'https://${BaseHttpApiV1}.execute-api.${AWS::Region}.amazonaws.com'

  BaseHttpApiV2Id:
    Description: 'ID of the Base HTTP API v2'
    Value: !Ref BaseHttpApiV2

  BaseHttpApiV2Url:
    Description: 'Base URL of the HTTP API v2'
    Value: !Sub 'https://${BaseHttpApiV2}.execute-api.${AWS::Region}.amazonaws.com'
