@page "/"

@using Amazon.Lambda.TestTool.Services
@using Amazon.Lambda.TestTool.Models
@using Amazon.Lambda.TestTool.SampleRequests;
@using Amazon.Lambda.TestTool.Services.IO
@using Microsoft.AspNetCore.Http;

@inject IHttpContextAccessor HttpContextAccessor
@inject IRuntimeApiDataStoreManager DataStoreManager
@inject IDirectoryManager DirectoryManager
@inject IThemeService ThemeService
@inject IJSRuntime JsRuntime

<PageTitle>Lambda Function Tester</PageTitle>

<h3>Lambda Function Tester</h3>

<div class="alert alert-secondary" role="alert">
    For Lambda functions written as executable assemblies, i.e. custom runtimes functions and top level statement functions, this page can be used for testing the functions locally.
    Set the <b>AWS_LAMBDA_RUNTIME_API</b> environment variable to <b>@HttpContextAccessor?.HttpContext?.Request?.Host</b> while debugging executable assembly
    Lambda function. More information can be found in the <a href="/documentation">documentation</a>.
</div>

<div class="row h-100">
    <div class="col-lg-6 gap-2 d-flex flex-column mt-1 mb-3">
        <div class="form-group d-flex">
            <h4>Queue Event</h4>
            <button class="btn btn-primary btn-sm ms-auto rounded-pill px-4 fw-bold d-flex align-items-center gap-1" @onclick="OnAddEventClick">
                <i class="bi bi-play-fill"></i>
                Invoke
            </button>
        </div>
        <div class="form-floating">
            <select class="form-select" id="sample-requests" @bind="SelectedSampleRequestName">
                <option value="@NoSampleSelectedId">Select a request</option>
                @if (@SampleRequests.ContainsKey(SampleRequestManager.SavedRequestGroup))
                {
                    <optgroup id="saved-select-request-group" label="@SampleRequestManager.SavedRequestGroup">
                        @foreach (var request in SampleRequests[SampleRequestManager.SavedRequestGroup])
                        {
                            <option value="@request.Filename">@request.Name</option>
                        }
                    </optgroup>
                }
                @foreach (var group in SampleRequests.Keys)
                {
                    @if (!string.Equals(group, SampleRequestManager.SavedRequestGroup))
                    {
                        <optgroup label="@group">
                            @foreach (var request in SampleRequests[group])
                            {
                                <option value="@request.Filename">@request.Name</option>
                            }
                        </optgroup>
                    }
                }
            </select>
            <label for="sample-requests">Example Requests</label>
        </div>
        <div class="mt-1 flex-grow-1 flex-fill">
            <label class="form-label" for="function-payload">Function Input</label>
            <StandaloneCodeEditor Id="function-payload" @ref="_editor" ConstructionOptions="EditorConstructionOptions" CssClass="rounded-4 overflow-hidden border"/>
        </div>
    </div>
    <div class="col-lg-6 d-flex flex-column">
        <nav class="navbar navbar-expand-md bd-navbar pt-0">
            <ul class="navbar-nav nav-underline nav-fill flex-row" id="eventsTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="active-tab" data-bs-toggle="tab" data-bs-target="#active-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Active Event</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="queued-tab" data-bs-toggle="tab" data-bs-target="#queued-tab-pane" type="button" role="tab" aria-controls="queued-tab-pane" aria-selected="false">Queued Events</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="executed-tab" data-bs-toggle="tab" data-bs-target="#executed-tab-pane" type="button" role="tab" aria-controls="executed-tab-pane" aria-selected="false">Executed Events</button>
                </li>
            </ul>
        </nav>
        <div class="tab-content d-flex flex-column flex-grow-1 flex-fill" id="eventsTabContent">
            <div class="tab-pane fade flex-fill active show" id="active-tab-pane" role="tabpanel" aria-labelledby="active-tab" tabindex="0">
                @if (DataStore.ActiveEvent == null)
                {
                    <div class="d-flex justify-content-center flex-grow-1 align-self-center my-5">
                        <div class="d-flex flex-column align-items-center gap-4">
                            <i class="bi bi-journal-text" style="font-size: 96px;"></i>
                            <span class="text-muted" style="font-size: 1.25rem;">Looks like you don't have an active event...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="flex-grow-1">
                        <div class="d-flex bg-body-tertiary p-2 align-items-start gap-2">
                            <div class="d-flex flex-column gap-2">
                                <div class="d-flex align-items-center gap-2">
                                    <div><b>Request ID:</b> @DataStore.ActiveEvent.AwsRequestId</div>
                                    <span class="badge @GetStatusBadgeStyle(DataStore.ActiveEvent.EventStatus)">@DataStore.ActiveEvent.EventStatus</span>
                                </div>
                                <div><b>Last Updated:</b> @DataStore.ActiveEvent.LastUpdated</div>
                                <div><b>Event JSON:</b> <span class="event-value"><span class="fake-link" @onclick="() => ShowEventJson(DataStore.ActiveEvent)">@CreateSnippet(DataStore.ActiveEvent.EventJson)</span></span></div>
                                @if (DataStore.ActiveEvent.EventStatus == EventContainer.Status.Failure)
                                {
                                    <div><b>Error Type:</b> @DataStore.ActiveEvent.ErrorType</div>
                                }
                            </div>
                            <button class="btn btn-primary btn-sm rounded-pill ms-auto" @onclick="() => OnRequeue(DataStore.ActiveEvent.AwsRequestId)">
                                <i class="bi bi-arrow-clockwise"></i>
                                Re-Invoke
                            </button>
                        </div>
                        @if (DataStore.ActiveEvent.EventStatus == EventContainer.Status.Failure)
                        {
                            <p class="mt-2">
                                <b class="px-2">Error Response</b>
                                <StandaloneCodeEditor Id="activeEditorError" @ref="_activeEditorError" ConstructionOptions="ActiveErrorEditorConstructionOptions" CssClass="rounded-4 overflow-hidden border"/>
                            </p>
                        }
                        else
                        {
                            <p class="mt-2">
                                <b class="px-2">Response</b>
                                <StandaloneCodeEditor Id="activeEditor" @ref="_activeEditor" ConstructionOptions="ActiveEditorConstructionOptions" CssClass="rounded-4 overflow-hidden border"/>
                            </p>
                        }
                    </div>
                }
            </div>
            <div class="tab-pane fade flex-fill flex-column gap-2" id="queued-tab-pane" role="tabpanel" aria-labelledby="queued-tab" tabindex="1">
                @if (!DataStore.QueuedEvents.Any())
                {
                    <div class="d-flex justify-content-center flex-grow-1 align-items-center my-5">
                        <div class="d-flex flex-column align-items-center gap-4">
                            <i class="bi bi-journal-text" style="font-size: 96px;"></i>
                            <span class="text-muted" style="font-size: 1.25rem;">Looks like you don't have any queued events...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex bg-body-tertiary p-2 align-items-start gap-2">
                        <button class="btn btn-secondary btn-sm rounded-pill ms-auto d-flex align-items-center gap-1 px-2" @onclick="OnClearQueued">
                            <i class="bi bi-x-lg"></i>
                            Clear
                        </button>
                    </div>
                    <div class="col-xs-5 event-list">
                        @foreach (var evnt in @DataStore.QueuedEvents)
                        {
                            <div class="alert alert-secondary d-flex gap-2 p-0" role="alert">
                                <div class="d-flex flex-column gap-2 p-3">
                                    <div><b>Request ID:</b> @evnt.AwsRequestId</div>
                                    <div><b>Last Updated:</b> @evnt.LastUpdated</div>
                                    <div><b>Event JSON:</b> <span class="event-value"><span class="fake-link" @onclick="() => ShowEventJson(evnt)">@CreateSnippet(evnt.EventJson)</span></span></div>
                                </div>
                                <div class="ms-auto p-1">
                                    <button class="btn btn-sm" style="cursor: pointer" @onclick="() => OnDeleteEvent(evnt.AwsRequestId)">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="tab-pane fade flex-fill flex-column gap-2" id="executed-tab-pane" role="tabpanel" aria-labelledby="executed-tab" tabindex="2">
                @if (!DataStore.ExecutedEvents.Any())
                {
                    <div class="d-flex justify-content-center flex-grow-1 align-items-center my-5">
                        <div class="d-flex flex-column align-items-center gap-4">
                            <i class="bi bi-journal-text" style="font-size: 96px;"></i>
                            <span class="text-muted" style="font-size: 1.25rem;">Looks like you don't have any executed events...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex bg-body-tertiary p-2 align-items-start gap-2">
                        <button class="btn btn-secondary btn-sm rounded-pill ms-auto d-flex align-items-center gap-1 px-2" @onclick="OnClearExecuted">
                            <i class="bi bi-x-lg"></i>
                            Clear
                        </button>
                    </div>
                    <div class="col-xs-5 event-list">
                        @foreach (var evnt in @DataStore.ExecutedEvents.OrderByDescending(x => x.LastUpdated))
                        {
                            <div class="event-list-item">
                                <div class="alert alert-secondary d-flex gap-2 p-0" role="alert">
                                    <div class="d-flex flex-column gap-2 p-3">
                                        <div class="d-flex align-items-center gap-2">
                                            <div><b>Request ID:</b> @evnt.AwsRequestId</div>
                                            <span class="badge @GetStatusBadgeStyle(evnt.EventStatus)">@evnt.EventStatus</span>
                                        </div>
                                        <div><b>Last Updated:</b> @evnt.LastUpdated</div>
                                        <div><b>Event JSON:</b> <span class="event-value"><span class="fake-link" @onclick="() => ShowEventJson(evnt)">@CreateSnippet(evnt.EventJson)</span></span></div>
                                        @if (evnt.EventStatus == EventContainer.Status.Success)
                                        {
                                            <div><b>Response:</b> <span class="fake-link" @onclick="() => ShowResponse(evnt)">@CreateSnippet(evnt.Response)</span></div>
                                        }
                                        else if (evnt.EventStatus == EventContainer.Status.Failure)
                                        {
                                            <div><b>Error Type:</b> @evnt.ErrorType</div>
                                            <div><b>Error Response:</b> <span class="fake-link" @onclick="() => ShowError(evnt)">@CreateSnippet(evnt.ErrorResponse)</span></div>
                                        }
                                    </div>
                                    <div class="ms-auto p-1">
                                        <button class="btn btn-sm" style="cursor: pointer" @onclick="() => OnRequeue(evnt.AwsRequestId)">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                        <button class="btn btn-sm" style="cursor: pointer" @onclick="() => OnDeleteEvent(evnt.AwsRequestId)">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>




@code {
    private StandaloneCodeEditor _editor = null!;
    private StandaloneCodeEditor _activeEditor = null!;
    private StandaloneCodeEditor _activeEditorError = null!;

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private const string NoSampleSelectedId = "void-select-request";

    private IDictionary<string, IList<LambdaRequest>> SampleRequests { get; set; } = new Dictionary<string, IList<LambdaRequest>>();

    private IRuntimeApiDataStore DataStore => DataStoreManager.GetLambdaRuntimeDataStore(LambdaRuntimeApi.DefaultFunctionName);

    string? _selectedSampleRequestName;
    string? SelectedSampleRequestName
    {
        get => _selectedSampleRequestName;
        set
        {
            if (SampleRequestManager == null)
                return;

            _selectedSampleRequestName = value;
            if (string.IsNullOrEmpty(_selectedSampleRequestName) ||
                string.Equals(value, NoSampleSelectedId))
            {
                _editor.SetValue(string.Empty);
            }
            else
            {
                _editor.SetValue(SampleRequestManager.GetRequest(_selectedSampleRequestName));
            }

            StateHasChanged();
        }
    }

    SampleRequestManager? SampleRequestManager { get; set; }

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += HandleThemeChanged;
        DataStore.StateChange += DataStoreOnStateChange;
        SampleRequestManager = new SampleRequestManager(DirectoryManager.GetCurrentDirectory());
        SampleRequests = SampleRequestManager.GetSampleRequests();
    }

    private void HandleThemeChanged()
    {
        if (ThemeService.CurrentTheme.Equals("dark"))
        {
            BlazorMonaco.Editor.Global.SetTheme(JsRuntime, "vs-dark");
        }
        else
        {
            BlazorMonaco.Editor.Global.SetTheme(JsRuntime, "vs");
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= HandleThemeChanged; // Unsubscribe to avoid memory leaks
    }

    private void DataStoreOnStateChange(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            this.StateHasChanged();
            if (_activeEditor != null)
                _activeEditor.SetValue(DataStore.ActiveEvent?.Response);
            if (_activeEditorError != null)
                _activeEditorError.SetValue(DataStore.ActiveEvent?.ErrorResponse);
        });
    }

    async Task OnAddEventClick()
    {
        var editorValue = await _editor.GetValue();
        DataStore.QueueEvent(editorValue, false);
        await _editor.SetValue(string.Empty);
        SelectedSampleRequestName = NoSampleSelectedId;
        StateHasChanged();
    }

    void OnClearQueued()
    {
        DataStore.ClearQueued();
        StateHasChanged();
    }

    void OnClearExecuted()
    {
        DataStore.ClearExecuted();
        StateHasChanged();
    }

    void OnRequeue(string awsRequestId)
    {
        EventContainer? evnt = null;
        if (string.Equals(DataStore.ActiveEvent?.AwsRequestId, awsRequestId))
        {
            evnt = DataStore.ActiveEvent;
        }
        else
        {
            evnt = DataStore.ExecutedEvents.FirstOrDefault(x => string.Equals(x.AwsRequestId, awsRequestId));
        }

        if (evnt == null)
            return;

        DataStore.QueueEvent(evnt.EventJson, false);
        StateHasChanged();
    }

    void OnDeleteEvent(string awsRequestId)
    {
        DataStore.DeleteEvent(awsRequestId);
        StateHasChanged();
    }

    string GetStatusBadgeStyle(EventContainer.Status status) => status switch
    {
        EventContainer.Status.Success => "text-bg-success",
        EventContainer.Status.Failure => "text-bg-danger",
        _ => "text-bg-secondary"
    };

    string CreateSnippet(string? fullString)
    {
        const int maxLength = 50;
        string trim;
        if (fullString == null || fullString.Length < maxLength)
        {
            trim = fullString ?? string.Empty;
        }
        else
        {
            trim = fullString.Substring(0, maxLength);
        }

        return trim;
    }

    void ShowEventJson(EventContainer evnt)
    {
        ShowExpandedText("Event JSON", evnt.EventJson);
    }

    void ShowResponse(EventContainer evnt)
    {
        ShowExpandedText("Response", evnt.Response ?? string.Empty);
    }

    void ShowError(EventContainer evnt)
    {
        ShowExpandedText("Error Response", evnt.ErrorResponse ?? string.Empty);
    }

    void ShowExpandedText(string title, string text)
    {
        var parameters = new ModalParameters();
        parameters.Add(ExpandedTextDialog.PARAMETER_NAME_FULL_TEXT, text);
        Modal.Show<ExpandedTextDialog>(title, parameters);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "json",
            GlyphMargin = false,
            Theme = ThemeService.CurrentTheme.Equals("dark") ? "vs-dark" : "vs",
            AutomaticLayout = true,
            ScrollBeyondLastLine = false,
            Minimap = new EditorMinimapOptions
            {
                Enabled = false
            }
        };
    }

    private StandaloneEditorConstructionOptions ActiveEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "json",
            GlyphMargin = false,
            Theme = ThemeService.CurrentTheme.Equals("dark") ? "vs-dark" : "vs",
            Value = DataStore.ActiveEvent?.Response,
            FontSize = 12,
            AutomaticLayout = true,
            ScrollBeyondLastLine = false,
            ReadOnly = true,
            Minimap = new EditorMinimapOptions
            {
                Enabled = false
            }
        };
    }

    private StandaloneEditorConstructionOptions ActiveErrorEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "json",
            GlyphMargin = false,
            Theme = ThemeService.CurrentTheme.Equals("dark") ? "vs-dark" : "vs",
            Value = DataStore.ActiveEvent?.ErrorResponse,
            FontSize = 12,
            AutomaticLayout = true,
            ScrollBeyondLastLine = false,
            ReadOnly = true,
            Minimap = new EditorMinimapOptions
            {
                Enabled = false
            }
        };
    }
}
