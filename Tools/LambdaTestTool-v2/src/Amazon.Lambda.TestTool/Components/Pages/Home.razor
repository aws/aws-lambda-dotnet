@page "/"

@using Amazon.Lambda.TestTool.Commands
@using Amazon.Lambda.TestTool.Services
@using Amazon.Lambda.TestTool.Models
@using Amazon.Lambda.TestTool.SampleRequests;
@using Amazon.Lambda.TestTool.Services.IO
@using Amazon.Lambda.TestTool.Utilities
@using Microsoft.AspNetCore.Http;

@inject IHttpContextAccessor HttpContextAccessor
@inject IRuntimeApiDataStoreManager DataStoreManager
@inject IDirectoryManager DirectoryManager

<PageTitle>Lambda Function Tester</PageTitle>

<h3>Lambda Function Tester</h3>

<div class="alert alert-secondary" role="alert">
    For Lambda functions written as executable assemblies, i.e. custom runtimes functions and top level statement functions, this page can be used for testing the functions locally.
    Set the <b>AWS_LAMBDA_RUNTIME_API</b> environment variable to <b>@HttpContextAccessor?.HttpContext?.Request?.Host</b> while debugging executable assembly
    Lambda function. More information can be found in the <a href="/documentation">documentation</a>.
</div>

<div class="row">
    <div class="col-sm-6 gap-2 d-flex flex-column mt-1">
        <div class="form-group d-flex">
            <h4>Queue Event</h4>
            <button class="btn btn-primary btn-sm ms-auto rounded-pill px-4 fw-bold" @onclick="OnAddEventClick">Invoke</button>
        </div>
        <div class="form-floating">
            <select class="form-select" id="sample-requests" @bind="SelectedSampleRequestName">
                <option value="@NoSampleSelectedId">Select a request</option>
                @if (@SampleRequests.ContainsKey(SampleRequestManager.SavedRequestGroup))
                {
                    <optgroup id="saved-select-request-group" label="@SampleRequestManager.SavedRequestGroup">
                        @foreach (var request in SampleRequests[SampleRequestManager.SavedRequestGroup])
                        {
                            <option value="@request.Filename">@request.Name</option>
                        }
                    </optgroup>
                }
                @foreach (var group in SampleRequests.Keys)
                {
                    @if (!string.Equals(group, SampleRequestManager.SavedRequestGroup))
                    {
                        <optgroup label="@group">
                            @foreach (var request in SampleRequests[group])
                            {
                                <option value="@request.Filename">@request.Name</option>
                            }
                        </optgroup>
                    }
                }
            </select>
            <label for="sample-requests">Example Requests</label>
        </div>
        <div class="mt-1">
            <label class="form-label" for="function-payload">Function Input</label>
            <StandaloneCodeEditor Id="function-payload" @ref="_editor" ConstructionOptions="EditorConstructionOptions" CssClass="rounded-4 overflow-hidden border"/>
        </div>
    </div>
    <div class="col-sm-6">
        <nav class="navbar navbar-expand-lg bd-navbar pt-0">
            <ul class="navbar-nav nav-underline nav-fill" id="eventsTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="active-tab" data-bs-toggle="tab" data-bs-target="#active-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Active Event</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="queued-tab" data-bs-toggle="tab" data-bs-target="#queued-tab-pane" type="button" role="tab" aria-controls="queued-tab-pane" aria-selected="false">Queued Events</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="executed-tab" data-bs-toggle="tab" data-bs-target="#executed-tab-pane" type="button" role="tab" aria-controls="executed-tab-pane" aria-selected="false">Executed Events</button>
                </li>
            </ul>
        </nav>
        <div class="tab-content" id="eventsTabContent">
            <div class="tab-pane fade show active" id="active-tab-pane" role="tabpanel" aria-labelledby="active-tab" tabindex="0">
                <h3>Active Event:</h3>
                @if (DataStore.ActiveEvent == null)
                {
                    <h2>No active event</h2>
                }
                else
                {
                    <div>
                        <div style="cursor: pointer" @onclick="() => OnRequeue(DataStore.ActiveEvent.AwsRequestId)">
                            @((MarkupString)RebootIcon)
                        </div>
                        <p><b>Request ID:</b> @DataStore.ActiveEvent.AwsRequestId</p>
                        <p><b>Status:</b> <span style="@GetStatusStyle(DataStore.ActiveEvent.EventStatus)">@DataStore.ActiveEvent.EventStatus</span></p>
                        <p><b>Last Updated:</b> @DataStore.ActiveEvent.LastUpdated</p>
                        <p><b>Event JSON:</b><span class="event-value"><span class="fake-link" @onclick="() => ShowEventJson(DataStore.ActiveEvent)">@CreateSnippet(DataStore.ActiveEvent.EventJson)</span></span></p>
                        @if (DataStore.ActiveEvent.EventStatus == EventContainer.Status.Failure)
                        {
                            <p><b>Error Type:</b> @DataStore.ActiveEvent.ErrorType</p>
                            <p>
                                <b>Error Response:</b>
                                <pre class="form-control" style="@Constants.ResponseErrorStyleSizeConstraint">@DataStore.ActiveEvent.ErrorResponse</pre>
                            </p>
                        }
                        else
                        {
                            <p>
                                <b>Response:</b>
                                <pre class="form-control" style="@Constants.ResponseSuccessStyleSizeConstraint">@Utils.TryPrettyPrintJson(DataStore.ActiveEvent.Response)</pre>
                            </p>
                        }
                    </div>
                }
            </div>
            <div class="tab-pane fade" id="queued-tab-pane" role="tabpanel" aria-labelledby="queued-tab" tabindex="1">
                <h3>Queued Events: <button class="btn btn-secondary btn-sm" @onclick="OnClearQueued">Clear</button></h3>
                <div class="col-xs-5 event-list">
                    @foreach (var evnt in @DataStore.QueuedEvents)
                    {
                        <div class="event-list-item">
                            <div class="row" style="padding: 2px">
                                <div class="col-sm-11 row">
                                    <div class="event-label">Request ID:</div><div class="event-value"> @evnt.AwsRequestId</div>
                                    <div class="event-label">Last Updated:</div><div class="event-value">@evnt.LastUpdated</div>
                                </div>
                                <div class="col-sm-1 " style="cursor: pointer" @onclick="() => OnDeleteEvent(evnt.AwsRequestId)">
                                    @((MarkupString)CloseIcon)
                                </div>
                            </div>
                            <div class="row" style="padding: 2px">
                                <div class="event-label">Event JSON:</div><div class="event-value"><span class="fake-link" @onclick="() => ShowEventJson(evnt)">@CreateSnippet(evnt.EventJson)</span></div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="tab-pane fade" id="executed-tab-pane" role="tabpanel" aria-labelledby="executed-tab" tabindex="2">
                <h3>Executed Events: <button class="btn btn-secondary btn-sm" @onclick="OnClearExecuted">Clear</button></h3>
                <div class="col-xs-5 event-list">
                    @foreach (var evnt in @DataStore.ExecutedEvents.OrderByDescending(x => x.LastUpdated))
                    {
                        <div class="event-list-item">
                            <div class="row" style="padding: 2px">
                                <div class="col-sm-1 " style="cursor: pointer" @onclick="() => OnRequeue(evnt.AwsRequestId)">
                                    @((MarkupString)RebootIcon)
                                </div>
                                <div class="col-sm-10 row">
                                    <div class="event-label">Request ID:</div><div class="event-value"> @evnt.AwsRequestId</div>
                                    <div class="event-label">Status:</div><div class="event-value" style="@GetStatusStyle(evnt.EventStatus)">@evnt.EventStatus</div>
                                    <div class="event-label">Last Updated:</div><div class="event-value">@evnt.LastUpdated</div>
                                </div>
                                <div class="col-sm-1 " style="cursor: pointer" @onclick="() => OnDeleteEvent(evnt.AwsRequestId)">
                                    @((MarkupString)CloseIcon)
                                </div>
                            </div>
                            <div class="row" style="padding: 2px">
                                <div class="event-label">Event JSON:</div><div class="event-value"><span class="fake-link" @onclick="() => ShowEventJson(evnt)">@CreateSnippet(evnt.EventJson)</span></div>
                            </div>
                            @if (evnt.EventStatus == EventContainer.Status.Success)
                            {
                                <div class="row" style="padding: 2px">
                                    <div class="event-label">Response: </div><div class="event-value"><span class="fake-link" @onclick="() => ShowResponse(evnt)">@CreateSnippet(evnt.Response)</span></div>
                                </div>
                            }
                            else if (evnt.EventStatus == EventContainer.Status.Failure)
                            {
                                <div class="row" style="padding: 2px">
                                    <div class="event-label">Error Type:</div><div class="event-value">@evnt.ErrorType</div>
                                </div>
                                <div class="row" style="padding: 2px">
                                    <div class="event-label">Error Response: </div><div class="event-value"><span class="fake-link" @onclick="() => ShowError(evnt)">@CreateSnippet(evnt.ErrorResponse)</span></div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    private StandaloneCodeEditor _editor = null!;

    private const string RebootIcon = @"
<svg xmlns=""http://www.w3.org/2000/svg"" width=""16"" height=""16"" fill=""currentColor"" class=""bi bi-bootstrap-reboot"" viewBox=""0 0 16 16"">
    <path d=""M1.161 8a6.84 6.84 0 1 0 6.842-6.84.58.58 0 1 1 0-1.16 8 8 0 1 1-6.556 3.412l-.663-.577a.58.58 0 0 1 .227-.997l2.52-.69a.58.58 0 0 1 .728.633l-.332 2.592a.58.58 0 0 1-.956.364l-.643-.56A6.812 6.812 0 0 0 1.16 8z""/>
</svg>
";

    private const string CloseIcon = @"
<svg xmlns=""http://www.w3.org/2000/svg"" width=""16"" height=""16"" fill=""currentColor"" class=""bi bi-x"" viewBox=""0 0 16 16"">
  <path d=""M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z""/>
</svg>
";

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private const string NoSampleSelectedId = "void-select-request";

    private string FunctionInput { get; set; } = "";

    private IDictionary<string, IList<LambdaRequest>> SampleRequests { get; set; } = new Dictionary<string, IList<LambdaRequest>>();

    private IRuntimeApiDataStore DataStore => DataStoreManager.GetLambdaRuntimeDataStore(LambdaRuntimeApi.DefaultFunctionName);

    string? _selectedSampleRequestName;
    string? SelectedSampleRequestName
    {
        get => _selectedSampleRequestName;
        set
        {
            if (SampleRequestManager == null)
                return;

            _selectedSampleRequestName = value;
            if (string.IsNullOrEmpty(_selectedSampleRequestName) ||
                string.Equals(value, NoSampleSelectedId))
            {
                FunctionInput = string.Empty;
            }
            else
            {
                FunctionInput = SampleRequestManager.GetRequest(_selectedSampleRequestName);
            }

            _editor.SetValue(FunctionInput);
            StateHasChanged();
        }
    }

    SampleRequestManager? SampleRequestManager { get; set; }

    protected override void OnInitialized()
    {
        DataStore.StateChange += DataStoreOnStateChange;
        SampleRequestManager = new SampleRequestManager(DirectoryManager.GetCurrentDirectory());
        SampleRequests = SampleRequestManager.GetSampleRequests();
    }

    private void DataStoreOnStateChange(object? sender, EventArgs e)
    {
        InvokeAsync(this.StateHasChanged);
    }

    void OnAddEventClick()
    {
        DataStore.QueueEvent(FunctionInput, false);
        FunctionInput = "";
        SelectedSampleRequestName = NoSampleSelectedId;
        StateHasChanged();
    }

    void OnClearQueued()
    {
        DataStore.ClearQueued();
        StateHasChanged();
    }

    void OnClearExecuted()
    {
        DataStore.ClearExecuted();
        StateHasChanged();
    }

    void OnRequeue(string awsRequestId)
    {
        EventContainer? evnt = null;
        if (string.Equals(DataStore.ActiveEvent?.AwsRequestId, awsRequestId))
        {
            evnt = DataStore.ActiveEvent;
        }
        else
        {
            evnt = DataStore.ExecutedEvents.FirstOrDefault(x => string.Equals(x.AwsRequestId, awsRequestId));
        }

        if (evnt == null)
            return;

        DataStore.QueueEvent(evnt.EventJson, false);
        StateHasChanged();
    }

    void OnDeleteEvent(string awsRequestId)
    {
        DataStore.DeleteEvent(awsRequestId);
        StateHasChanged();
    }

    string GetStatusStyle(EventContainer.Status status) => status switch
    {
        EventContainer.Status.Success => "color:green",
        EventContainer.Status.Failure => "color:red",
        _ => "color:black"
    };

    string CreateSnippet(string? fullString)
    {
        const int maxLength = 50;
        string trim;
        if (fullString == null || fullString.Length < maxLength)
        {
            trim = fullString ?? string.Empty;
        }
        else
        {
            trim = fullString.Substring(0, maxLength);
        }

        return trim;
    }

    void ShowEventJson(EventContainer evnt)
    {
        ShowExpandedText("Event JSON", evnt.EventJson);
    }

    void ShowResponse(EventContainer evnt)
    {
        ShowExpandedText("Response", evnt.Response ?? string.Empty);
    }

    void ShowError(EventContainer evnt)
    {
        ShowExpandedText("Error Response", evnt.ErrorResponse ?? string.Empty);
    }

    void ShowExpandedText(string title, string text)
    {
        var parameters = new ModalParameters();
        parameters.Add(ExpandedTextDialog.PARAMETER_NAME_FULL_TEXT, text);
        Modal.Show<ExpandedTextDialog>(title, parameters);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "json",
            GlyphMargin = true,
            Theme = "vs-dark"
        };
    }
}
