@using Amazon.Lambda.TestTool.Commands
@using Amazon.Lambda.TestTool.SampleRequests;
@using Amazon.Lambda.TestTool.Services
@using Amazon.Lambda.TestTool.Services.IO
@inject IModalService ModalService
@inject IDirectoryManager DirectoryManager

<div class="simple-form" style="min-width: 400px">
    <div class="form-group" for="save-request-name">
        <label class="control-label">Enter a request name: </label>
        <input id="save-request-name" type="text" class="form-control" @bind="SaveRequestName" />
    </div>
    <button type="button" class="btn btn-primary" @onclick="OnSaveChangesClicked">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancelClicked">Cancel</button>
</div>


@code {

    public const string PARAMETER_NAME_REQUEST_BODY = "RequestBody";

    [Parameter] public string? SaveRequestName { get; set; }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] ModalParameters? Parameters { get; set; }

    async Task OnSaveChangesClicked()
    {
        if (Parameters == null || SaveRequestName == null)
            return;

        var requestBody = Parameters.Get<string>(PARAMETER_NAME_REQUEST_BODY);

        var manager = new SampleRequestManager(DirectoryManager.GetCurrentDirectory());
        var systemName = manager.SaveRequest(SaveRequestName, requestBody);

        await BlazoredModal.CloseAsync(ModalResult.Ok(systemName));
    }


    async Task OnCancelClicked()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel());
    }
}
