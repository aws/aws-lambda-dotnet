using Amazon.Lambda.Annotations;
using Amazon.Lambda.Annotations.APIGateway;
using Amazon.Lambda.Annotations.SQS;
using Amazon.Lambda.SQSEvents;
using System;

namespace TestServerlessApp.SQSEventExamples
{
    // This file represents invalid usage of the SQSEventAttribute. 
    // This file is sent as input to the source generator unit tests and we assert that compilation errors are thrown with the appropriate diagnostic message.
    // Refer to the VerifyInvalidSQSEvents_ThrowsCompilationErrors unit test.

    public class InvalidSQSEvents
    {
        [LambdaFunction]
        [SQSEvent("@testQueue", BatchSize = 0, MaximumBatchingWindowInSeconds = 302, MaximumConcurrency = 1)]
        public void ProcessMessageWithInvalidSQSEventAttributes(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("@testQueue")]
        public void ProcessMessageWithInvalidParameters(SQSEvent evnt, bool invalidParameter1, int invalidParameter2)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("@testQueue")]
        public bool ProcessMessageWithInvalidReturnType(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
            return true;
        }

        [LambdaFunction]
        [RestApi(LambdaHttpMethod.Get, "/")]
        [SQSEvent("@testQueue")]
        public void ProcessMessageWithMultipleEventTypes(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("test-queue")]
        public void ProcessMessageWithInvalidQueueArn(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("@testQueue", ResourceName = "sqs-event-source")]
        public void ProcessMessageWithInvalidResourceName(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("@testQueue", ResourceName = "")]
        public void ProcessMessageWithEmptyResourceName(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("@testQueue", BatchSize = 100)]
        public void ProcessMessageWithMaximumBatchingWindowInSecondsNotSpecified(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("@testQueue", BatchSize = 100, MaximumBatchingWindowInSeconds = 0)]
        public void ProcessMessageWithMaximumBatchingWindowInSecondsLessThanOne(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }

        [LambdaFunction]
        [SQSEvent("arn:aws:sqs:us-east-2:444455556666:test-queue.fifo", BatchSize = 100, MaximumBatchingWindowInSeconds = 5)]
        public void ProcessMessageWithFifoQueue(SQSEvent evnt)
        {
            Console.WriteLine($"Event processed: {evnt}");
        }
    }
}
